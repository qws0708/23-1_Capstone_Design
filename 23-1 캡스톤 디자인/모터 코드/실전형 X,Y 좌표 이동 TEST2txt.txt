int IN1 = 2;
int IN2 = 3;
int IN3 = 4;
int IN4 = 5;

int IN5 = 8;
int IN6 = 9;
int IN7 = 10;
int IN8 = 11;

void setup() {

  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(IN5, OUTPUT);
  pinMode(IN6, OUTPUT);
  pinMode(IN7, OUTPUT);
  pinMode(IN8, OUTPUT);

  Serial.begin(9600);
}


void X_Forward_Turn1() {  // X축 시계방향 1.8도 한바퀴
  digitalWrite(IN5, LOW);
  digitalWrite(IN6, HIGH);
  digitalWrite(IN7, HIGH);
  digitalWrite(IN8, LOW);
  delay(3);
}

void X_Forward_Turn2() {  // X축 시계방향 1.8도 한바퀴
  digitalWrite(IN5, LOW);
  digitalWrite(IN6, HIGH);
  digitalWrite(IN7, LOW);
  digitalWrite(IN8, HIGH);
  delay(3);
}

void X_Forward_Turn3() {  // X축 시계방향 1.8도 한바퀴
  digitalWrite(IN5, HIGH);
  digitalWrite(IN6, LOW);
  digitalWrite(IN7, LOW);
  digitalWrite(IN8, HIGH);
  delay(3);
}

void X_Forward_Turn4() {  // X축 시계방향 1.8도 한바퀴
  digitalWrite(IN5, HIGH);
  digitalWrite(IN6, LOW);
  digitalWrite(IN7, HIGH);
  digitalWrite(IN8, LOW);
  delay(3);
}



void X_Backward_Turn1() {  // X축 반시계방향 1.8도 한바퀴
  digitalWrite(IN5, HIGH);
  digitalWrite(IN6, LOW);
  digitalWrite(IN7, HIGH);
  digitalWrite(IN8, LOW);
  delay(3);
}

void X_Backward_Turn2() {  // X축 반시계방향 1.8도 한바퀴
  digitalWrite(IN5, HIGH);
  digitalWrite(IN6, LOW);
  digitalWrite(IN7, LOW);
  digitalWrite(IN8, HIGH);
  delay(3);
}

void X_Backward_Turn3() {  // X축 반시계방향 1.8도 한바퀴
  digitalWrite(IN5, LOW);
  digitalWrite(IN6, HIGH);
  digitalWrite(IN7, LOW);
  digitalWrite(IN8, HIGH);
  delay(3);
}

void X_Backward_Turn4() {  // X축 반시계방향 1.8도 한바퀴
  digitalWrite(IN5, LOW);
  digitalWrite(IN6, HIGH);
  digitalWrite(IN7, HIGH);
  digitalWrite(IN8, LOW);
  delay(3);
}



void Y_Forward_Turn1() {  // Y축 시계방향 1.8도 한바퀴
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  delay(3);
}

void Y_Forward_Turn2() {  // Y축 시계방향 1.8도 한바퀴
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  delay(3);
}

void Y_Forward_Turn3() {  // Y축 시계방향 1.8도 한바퀴
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  delay(3);
}

void Y_Forward_Turn4() {  // Y축 시계방향 1.8도 한바퀴
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  delay(3);
}



void Y_Backward_Turn1() {  // Y축 반시계방향 1.8도 한바퀴
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  delay(3);
}

void Y_Backward_Turn2() {  // Y축 반시계방향 1.8도 한바퀴
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  delay(3);
}

void Y_Backward_Turn3() {  // Y축 반시계방향 1.8도 한바퀴
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
  delay(3);
}

void Y_Backward_Turn4() {  // Y축 반시계방향 1.8도 한바퀴
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
  delay(3);
}


// 고정 값 ( 단위 : cm)

int start_X = 90;
int start_Y = 10;

int X_Rotation = 0;
int Y_Rotation = 0;

// X,Y 나누기 4 몫(share),나머지(remainder) => for문에 필요

int X_share = 0;
int X_remainder = 0;

int Y_share = 0;
int Y_remainder = 0;


void loop() {
  // 회전 수 입력 1바퀴 = 200 = 4cm , 1바퀴 = 1 = 0.02cm
  Serial.println("Enter X and Y about Next Position");
  Serial.print("X = ");

  while (Serial.available() == 0) {}  // Wait until data is available
  int X = Serial.parseInt();          // Read the input as an integer
  Serial.println(X);                  // Print the value of x

  // Clear the input buffer
  while (Serial.available() > 0) {
    char _ = Serial.read();
  }

  Serial.print("Y = ");

  while (Serial.available() == 0) {}  // Wait until data is available
  int Y = Serial.parseInt();          // Read the input as an integer
  Serial.println(Y);                  // Print the value of y

  // Clear the input buffer
  while (Serial.available() > 0) {
    char _ = Serial.read();
  }

  // 회전 수 입력 끝

  int X_distance = start_X - X;  // X축 좌표 차이(거리)
  int Y_distance = start_Y - Y;  // Y축 좌표 차이(거리)


  if (X_distance < 0) { // X1 - X2 < 0 : 시계 방향 회전 필요
    X_Rotation = abs(X_distance) / 0.02;  // X축 이동 시 필요 회전 수
    Serial.println(X_Rotation);

    X_share = X_Rotation / 4;
    X_remainder = X_Rotation % 4;

    for (int i = 0; i < X_share; i++) {
      X_Forward_Turn1();
      X_Forward_Turn2();
      X_Forward_Turn3();
      X_Forward_Turn4();
    }

    if (X_remainder == 3) {
      X_Forward_Turn1();
      X_Forward_Turn2();
      X_Forward_Turn3();
    }

    if (X_remainder == 2) {
      X_Forward_Turn1();
      X_Forward_Turn2();
    }

    if (X_remainder == 1) {
      X_Forward_Turn1();
    }
  }

  if (X_distance > 0) { // X1 - X2 > 0 : 반시계 방향 회전 필요
    X_Rotation = X_distance / 0.02;  // X축 이동 시 필요 회전 수
    Serial.println(X_Rotation);

    X_share = X_Rotation / 4;
    X_remainder = X_Rotation % 4;

    for (int i = 0; i < X_share; i++) {
      X_Backward_Turn1();
      X_Backward_Turn2();
      X_Backward_Turn3();
      X_Backward_Turn4();
    }

    if (X_remainder == 3) {
      X_Backward_Turn1();
      X_Backward_Turn2();
      X_Backward_Turn3();
    }

    if (X_remainder == 2) {
      X_Backward_Turn1();
      X_Backward_Turn2();
    }

    if (X_remainder == 1) {
      X_Backward_Turn1();
    }
  }

  if(X_distance == 0){  // X축 이동 없음
    Serial.println("X축 이동 없음");
  }

  delay(1000);

   if (Y_distance > 0) { // Y1 - Y2 > 0 :시계 방향 회전 필요
    Y_Rotation = Y_distance / 0.02;  // Y축 이동 시 필요 회전 수
    Serial.println(Y_Rotation);

    Y_share = Y_Rotation / 4;
    Y_remainder = Y_Rotation % 4;

    for (int i = 0; i < Y_share; i++) {
      Y_Forward_Turn1();
      Y_Forward_Turn2();
      Y_Forward_Turn3();
      Y_Forward_Turn4();
    }

    if (Y_remainder == 3) {
      Y_Forward_Turn1();
      Y_Forward_Turn2();
      Y_Forward_Turn3();
    }

    if (Y_remainder == 2) {
      Y_Forward_Turn1();
      Y_Forward_Turn2();
    }

    if (Y_remainder == 1) {
      Y_Forward_Turn1();
    }
  }

  
  if (Y_distance < 0) { // Y1 - Y2 < 0 : 반시계 방향 회전 필요
    Y_Rotation = abs(Y_distance / 0.02);  // X축 이동 시 필요 회전 수
    Serial.println(Y_Rotation);

    Y_share = Y_Rotation / 4;
    Y_remainder = Y_Rotation % 4;

    for (int i = 0; i < Y_share; i++) {
      Y_Backward_Turn1();
      Y_Backward_Turn2();
      Y_Backward_Turn3();
      Y_Backward_Turn4();
    }

    if (Y_remainder == 3) {
      Y_Backward_Turn1();
      Y_Backward_Turn2();
      Y_Backward_Turn3();
    }

    if (Y_remainder == 2) {
      Y_Backward_Turn1();
      Y_Backward_Turn2();
    }

    if (Y_remainder == 1) {
      Y_Backward_Turn1();
    }
  }

  if(Y_distance == 0){  //Y축 이동 없음
    Serial.println("Y축 이동 없음");
  }
}
